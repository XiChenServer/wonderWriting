// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: rpc/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_Login_FullMethodName             = "/user.User/Login"
	User_Register_FullMethodName          = "/user.User/Register"
	User_UserInfo_FullMethodName          = "/user.User/UserInfo"
	User_UserForgetPwd_FullMethodName     = "/user.User/UserForgetPwd"
	User_UserModPwd_FullMethodName        = "/user.User/UserModPwd"
	User_UserModAvatar_FullMethodName     = "/user.User/UserModAvatar"
	User_UserModBackground_FullMethodName = "/user.User/UserModBackground"
	User_UserModInfo_FullMethodName       = "/user.User/UserModInfo"
	User_UserFollow_FullMethodName        = "/user.User/UserFollow"
	User_UserCancelFollow_FullMethodName  = "/user.User/UserCancelFollow"
	User_LookAllFans_FullMethodName       = "/user.User/LookAllFans"
	User_LookAllFollow_FullMethodName     = "/user.User/LookAllFollow"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	UserForgetPwd(ctx context.Context, in *UserForgetPwdRequest, opts ...grpc.CallOption) (*UserForgetPwdResponse, error)
	UserModPwd(ctx context.Context, in *UserModPwdRequest, opts ...grpc.CallOption) (*UserModPwdResponse, error)
	UserModAvatar(ctx context.Context, in *UserModAvatarRequest, opts ...grpc.CallOption) (*UserModAvatarResponse, error)
	UserModBackground(ctx context.Context, in *UserModBackgroundRequest, opts ...grpc.CallOption) (*UserModBackgroundResponse, error)
	UserModInfo(ctx context.Context, in *UserModInfoRequest, opts ...grpc.CallOption) (*UserModInfoResponse, error)
	// 用户关注
	UserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error)
	// 用户取消关注
	UserCancelFollow(ctx context.Context, in *UserCancelFollowRequest, opts ...grpc.CallOption) (*UserCancelFollowResponse, error)
	// 用户查看自己的粉丝
	LookAllFans(ctx context.Context, in *LookAllFansRequest, opts ...grpc.CallOption) (*LookAllFansResponse, error)
	// 用户查看自己的关注
	LookAllFollow(ctx context.Context, in *LookAllFollowRequest, opts ...grpc.CallOption) (*LookAllFollowResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, User_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, User_UserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserForgetPwd(ctx context.Context, in *UserForgetPwdRequest, opts ...grpc.CallOption) (*UserForgetPwdResponse, error) {
	out := new(UserForgetPwdResponse)
	err := c.cc.Invoke(ctx, User_UserForgetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserModPwd(ctx context.Context, in *UserModPwdRequest, opts ...grpc.CallOption) (*UserModPwdResponse, error) {
	out := new(UserModPwdResponse)
	err := c.cc.Invoke(ctx, User_UserModPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserModAvatar(ctx context.Context, in *UserModAvatarRequest, opts ...grpc.CallOption) (*UserModAvatarResponse, error) {
	out := new(UserModAvatarResponse)
	err := c.cc.Invoke(ctx, User_UserModAvatar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserModBackground(ctx context.Context, in *UserModBackgroundRequest, opts ...grpc.CallOption) (*UserModBackgroundResponse, error) {
	out := new(UserModBackgroundResponse)
	err := c.cc.Invoke(ctx, User_UserModBackground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserModInfo(ctx context.Context, in *UserModInfoRequest, opts ...grpc.CallOption) (*UserModInfoResponse, error) {
	out := new(UserModInfoResponse)
	err := c.cc.Invoke(ctx, User_UserModInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error) {
	out := new(UserFollowResponse)
	err := c.cc.Invoke(ctx, User_UserFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCancelFollow(ctx context.Context, in *UserCancelFollowRequest, opts ...grpc.CallOption) (*UserCancelFollowResponse, error) {
	out := new(UserCancelFollowResponse)
	err := c.cc.Invoke(ctx, User_UserCancelFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LookAllFans(ctx context.Context, in *LookAllFansRequest, opts ...grpc.CallOption) (*LookAllFansResponse, error) {
	out := new(LookAllFansResponse)
	err := c.cc.Invoke(ctx, User_LookAllFans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LookAllFollow(ctx context.Context, in *LookAllFollowRequest, opts ...grpc.CallOption) (*LookAllFollowResponse, error) {
	out := new(LookAllFollowResponse)
	err := c.cc.Invoke(ctx, User_LookAllFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	UserForgetPwd(context.Context, *UserForgetPwdRequest) (*UserForgetPwdResponse, error)
	UserModPwd(context.Context, *UserModPwdRequest) (*UserModPwdResponse, error)
	UserModAvatar(context.Context, *UserModAvatarRequest) (*UserModAvatarResponse, error)
	UserModBackground(context.Context, *UserModBackgroundRequest) (*UserModBackgroundResponse, error)
	UserModInfo(context.Context, *UserModInfoRequest) (*UserModInfoResponse, error)
	// 用户关注
	UserFollow(context.Context, *UserFollowRequest) (*UserFollowResponse, error)
	// 用户取消关注
	UserCancelFollow(context.Context, *UserCancelFollowRequest) (*UserCancelFollowResponse, error)
	// 用户查看自己的粉丝
	LookAllFans(context.Context, *LookAllFansRequest) (*LookAllFansResponse, error)
	// 用户查看自己的关注
	LookAllFollow(context.Context, *LookAllFollowRequest) (*LookAllFollowResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServer) UserForgetPwd(context.Context, *UserForgetPwdRequest) (*UserForgetPwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserForgetPwd not implemented")
}
func (UnimplementedUserServer) UserModPwd(context.Context, *UserModPwdRequest) (*UserModPwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModPwd not implemented")
}
func (UnimplementedUserServer) UserModAvatar(context.Context, *UserModAvatarRequest) (*UserModAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModAvatar not implemented")
}
func (UnimplementedUserServer) UserModBackground(context.Context, *UserModBackgroundRequest) (*UserModBackgroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModBackground not implemented")
}
func (UnimplementedUserServer) UserModInfo(context.Context, *UserModInfoRequest) (*UserModInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserModInfo not implemented")
}
func (UnimplementedUserServer) UserFollow(context.Context, *UserFollowRequest) (*UserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFollow not implemented")
}
func (UnimplementedUserServer) UserCancelFollow(context.Context, *UserCancelFollowRequest) (*UserCancelFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCancelFollow not implemented")
}
func (UnimplementedUserServer) LookAllFans(context.Context, *LookAllFansRequest) (*LookAllFansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookAllFans not implemented")
}
func (UnimplementedUserServer) LookAllFollow(context.Context, *LookAllFollowRequest) (*LookAllFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookAllFollow not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserForgetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserForgetPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserForgetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserForgetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserForgetPwd(ctx, req.(*UserForgetPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserModPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserModPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserModPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserModPwd(ctx, req.(*UserModPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserModAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserModAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserModAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserModAvatar(ctx, req.(*UserModAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserModBackground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModBackgroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserModBackground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserModBackground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserModBackground(ctx, req.(*UserModBackgroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserModInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserModInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserModInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserModInfo(ctx, req.(*UserModInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserFollow(ctx, req.(*UserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCancelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCancelFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCancelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UserCancelFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCancelFollow(ctx, req.(*UserCancelFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LookAllFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookAllFansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LookAllFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LookAllFans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LookAllFans(ctx, req.(*LookAllFansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LookAllFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookAllFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LookAllFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LookAllFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LookAllFollow(ctx, req.(*LookAllFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _User_UserInfo_Handler,
		},
		{
			MethodName: "UserForgetPwd",
			Handler:    _User_UserForgetPwd_Handler,
		},
		{
			MethodName: "UserModPwd",
			Handler:    _User_UserModPwd_Handler,
		},
		{
			MethodName: "UserModAvatar",
			Handler:    _User_UserModAvatar_Handler,
		},
		{
			MethodName: "UserModBackground",
			Handler:    _User_UserModBackground_Handler,
		},
		{
			MethodName: "UserModInfo",
			Handler:    _User_UserModInfo_Handler,
		},
		{
			MethodName: "UserFollow",
			Handler:    _User_UserFollow_Handler,
		},
		{
			MethodName: "UserCancelFollow",
			Handler:    _User_UserCancelFollow_Handler,
		},
		{
			MethodName: "LookAllFans",
			Handler:    _User_LookAllFans_Handler,
		},
		{
			MethodName: "LookAllFollow",
			Handler:    _User_LookAllFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/user.proto",
}
