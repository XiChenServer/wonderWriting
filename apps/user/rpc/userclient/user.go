// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userclient

import (
	"context"

	"calligraphy/apps/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LookAllFansRequest        = user.LookAllFansRequest
	LookAllFansResponse       = user.LookAllFansResponse
	LookAllFollowRequest      = user.LookAllFollowRequest
	LookAllFollowResponse     = user.LookAllFollowResponse
	UserCancelFollowRequest   = user.UserCancelFollowRequest
	UserCancelFollowResponse  = user.UserCancelFollowResponse
	UserFollowRequest         = user.UserFollowRequest
	UserFollowResponse        = user.UserFollowResponse
	UserForgetPwdRequest      = user.UserForgetPwdRequest
	UserForgetPwdResponse     = user.UserForgetPwdResponse
	UserInfo                  = user.UserInfo
	UserInfoRequest           = user.UserInfoRequest
	UserInfoResponse          = user.UserInfoResponse
	UserLoginRequest          = user.UserLoginRequest
	UserLoginResponse         = user.UserLoginResponse
	UserModAvatarRequest      = user.UserModAvatarRequest
	UserModAvatarResponse     = user.UserModAvatarResponse
	UserModBackgroundRequest  = user.UserModBackgroundRequest
	UserModBackgroundResponse = user.UserModBackgroundResponse
	UserModInfoRequest        = user.UserModInfoRequest
	UserModInfoResponse       = user.UserModInfoResponse
	UserModPwdRequest         = user.UserModPwdRequest
	UserModPwdResponse        = user.UserModPwdResponse
	UserRegisterRequest       = user.UserRegisterRequest
	UserRegisterResponse      = user.UserRegisterResponse

	User interface {
		Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
		Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserForgetPwd(ctx context.Context, in *UserForgetPwdRequest, opts ...grpc.CallOption) (*UserForgetPwdResponse, error)
		UserModPwd(ctx context.Context, in *UserModPwdRequest, opts ...grpc.CallOption) (*UserModPwdResponse, error)
		UserModAvatar(ctx context.Context, in *UserModAvatarRequest, opts ...grpc.CallOption) (*UserModAvatarResponse, error)
		UserModBackground(ctx context.Context, in *UserModBackgroundRequest, opts ...grpc.CallOption) (*UserModBackgroundResponse, error)
		UserModInfo(ctx context.Context, in *UserModInfoRequest, opts ...grpc.CallOption) (*UserModInfoResponse, error)
		// 用户关注
		UserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error)
		// 用户取消关注
		UserCancelFollow(ctx context.Context, in *UserCancelFollowRequest, opts ...grpc.CallOption) (*UserCancelFollowResponse, error)
		// 用户查看自己的粉丝
		LookAllFans(ctx context.Context, in *LookAllFansRequest, opts ...grpc.CallOption) (*LookAllFansResponse, error)
		// 用户查看自己的关注
		LookAllFollow(ctx context.Context, in *LookAllFollowRequest, opts ...grpc.CallOption) (*LookAllFollowResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUser) UserForgetPwd(ctx context.Context, in *UserForgetPwdRequest, opts ...grpc.CallOption) (*UserForgetPwdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserForgetPwd(ctx, in, opts...)
}

func (m *defaultUser) UserModPwd(ctx context.Context, in *UserModPwdRequest, opts ...grpc.CallOption) (*UserModPwdResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserModPwd(ctx, in, opts...)
}

func (m *defaultUser) UserModAvatar(ctx context.Context, in *UserModAvatarRequest, opts ...grpc.CallOption) (*UserModAvatarResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserModAvatar(ctx, in, opts...)
}

func (m *defaultUser) UserModBackground(ctx context.Context, in *UserModBackgroundRequest, opts ...grpc.CallOption) (*UserModBackgroundResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserModBackground(ctx, in, opts...)
}

func (m *defaultUser) UserModInfo(ctx context.Context, in *UserModInfoRequest, opts ...grpc.CallOption) (*UserModInfoResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserModInfo(ctx, in, opts...)
}

// 用户关注
func (m *defaultUser) UserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserFollow(ctx, in, opts...)
}

// 用户取消关注
func (m *defaultUser) UserCancelFollow(ctx context.Context, in *UserCancelFollowRequest, opts ...grpc.CallOption) (*UserCancelFollowResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserCancelFollow(ctx, in, opts...)
}

// 用户查看自己的粉丝
func (m *defaultUser) LookAllFans(ctx context.Context, in *LookAllFansRequest, opts ...grpc.CallOption) (*LookAllFansResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LookAllFans(ctx, in, opts...)
}

// 用户查看自己的关注
func (m *defaultUser) LookAllFollow(ctx context.Context, in *LookAllFollowRequest, opts ...grpc.CallOption) (*LookAllFollowResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.LookAllFollow(ctx, in, opts...)
}
