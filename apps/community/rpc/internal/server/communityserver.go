// Code generated by goctl. DO NOT EDIT.
// Source: community.proto

package server

import (
	"context"

	"calligraphy/apps/community/rpc/internal/logic"
	"calligraphy/apps/community/rpc/internal/svc"
	"calligraphy/apps/community/rpc/types/community"
)

type CommunityServer struct {
	svcCtx *svc.ServiceContext
	community.UnimplementedCommunityServer
}

func NewCommunityServer(svcCtx *svc.ServiceContext) *CommunityServer {
	return &CommunityServer{
		svcCtx: svcCtx,
	}
}

func (s *CommunityServer) LookCollectPost(ctx context.Context, in *community.LookCollectPostRequest) (*community.LookCollectPostResponse, error) {
	l := logic.NewLookCollectPostLogic(ctx, s.svcCtx)
	return l.LookCollectPost(in)
}

// 查看回复
func (s *CommunityServer) LookReplyComment(ctx context.Context, in *community.LookReplyCommentRequest) (*community.LookReplyCommentResponse, error) {
	l := logic.NewLookReplyCommentLogic(ctx, s.svcCtx)
	return l.LookReplyComment(in)
}

// 回复评论
func (s *CommunityServer) ReplyComment(ctx context.Context, in *community.ReplyCommunityRequest) (*community.ReplyCommunityResponse, error) {
	l := logic.NewReplyCommentLogic(ctx, s.svcCtx)
	return l.ReplyComment(in)
}

// 对评论进行点赞
func (s *CommunityServer) LikeComment(ctx context.Context, in *community.LikeCommentRequest) (*community.LikeCommentResponse, error) {
	l := logic.NewLikeCommentLogic(ctx, s.svcCtx)
	return l.LikeComment(in)
}

// 对评论点赞的取消
func (s *CommunityServer) CancelLikeComment(ctx context.Context, in *community.CancelLikeCommentRequest) (*community.CancelLikeCommentResponse, error) {
	l := logic.NewCancelLikeCommentLogic(ctx, s.svcCtx)
	return l.CancelLikeComment(in)
}

// 定义点赞服务
func (s *CommunityServer) LikePost(ctx context.Context, in *community.CommunityLikePostRequest) (*community.CommunityLikePostResponse, error) {
	l := logic.NewLikePostLogic(ctx, s.svcCtx)
	return l.LikePost(in)
}

func (s *CommunityServer) CancelLikePost(ctx context.Context, in *community.CommunityCancelLikePostRequest) (*community.CommunityCancelLikePostResponse, error) {
	l := logic.NewCancelLikePostLogic(ctx, s.svcCtx)
	return l.CancelLikePost(in)
}

func (s *CommunityServer) CollectPost(ctx context.Context, in *community.CommunityCollectPostRequest) (*community.CommunityCollectPostResponse, error) {
	l := logic.NewCollectPostLogic(ctx, s.svcCtx)
	return l.CollectPost(in)
}

func (s *CommunityServer) CancelCollectPost(ctx context.Context, in *community.CommunityCancelCollectPostRequest) (*community.CommunityCancelCollectPostResponse, error) {
	l := logic.NewCancelCollectPostLogic(ctx, s.svcCtx)
	return l.CancelCollectPost(in)
}

// 定义评论服务
func (s *CommunityServer) CommentPost(ctx context.Context, in *community.CommunityContentPostRequest) (*community.CommunityContentPostResponse, error) {
	l := logic.NewCommentPostLogic(ctx, s.svcCtx)
	return l.CommentPost(in)
}

func (s *CommunityServer) CancelCommentPost(ctx context.Context, in *community.CommunityCancelContentPostRequest) (*community.CommunityCancelContentPostResponse, error) {
	l := logic.NewCancelCommentPostLogic(ctx, s.svcCtx)
	return l.CancelCommentPost(in)
}

// 定义帖子服务
func (s *CommunityServer) CommunityCreatePost(ctx context.Context, in *community.CommunityCreatePostRequest) (*community.CommunityCreatePostResponse, error) {
	l := logic.NewCommunityCreatePostLogic(ctx, s.svcCtx)
	return l.CommunityCreatePost(in)
}

func (s *CommunityServer) CommunityDelPost(ctx context.Context, in *community.CommunityDelPostRequest) (*community.CommunityDelPostResponse, error) {
	l := logic.NewCommunityDelPostLogic(ctx, s.svcCtx)
	return l.CommunityDelPost(in)
}

func (s *CommunityServer) CommunityLookPostByOwn(ctx context.Context, in *community.CommunityLookPostByOwnRequest) (*community.CommunityLookPostByOwnResponses, error) {
	l := logic.NewCommunityLookPostByOwnLogic(ctx, s.svcCtx)
	return l.CommunityLookPostByOwn(in)
}

func (s *CommunityServer) CommunityLookAllPosts(ctx context.Context, in *community.CommunityLookAllPostsRequest) (*community.CommunityLookAllPostsResponse, error) {
	l := logic.NewCommunityLookAllPostsLogic(ctx, s.svcCtx)
	return l.CommunityLookAllPosts(in)
}

// 查看帖子的评论
func (s *CommunityServer) LookComment(ctx context.Context, in *community.LookCommentRequest) (*community.LookCommentResponse, error) {
	l := logic.NewLookCommentLogic(ctx, s.svcCtx)
	return l.LookComment(in)
}

// 用户是否点赞帖子
func (s *CommunityServer) WhetherLikePost(ctx context.Context, in *community.WhetherLikePostRequest) (*community.WhetherLikePostResponse, error) {
	l := logic.NewWhetherLikePostLogic(ctx, s.svcCtx)
	return l.WhetherLikePost(in)
}

// 用户是否收藏帖子
func (s *CommunityServer) WhetherCollectPost(ctx context.Context, in *community.WhetherCollectPostRequest) (*community.WhetherCollectPostResponse, error) {
	l := logic.NewWhetherCollectPostLogic(ctx, s.svcCtx)
	return l.WhetherCollectPost(in)
}

// 查看帖子详情
func (s *CommunityServer) ViewPostDetails(ctx context.Context, in *community.ViewPostDetailsRequest) (*community.ViewPostDetailsResponse, error) {
	l := logic.NewViewPostDetailsLogic(ctx, s.svcCtx)
	return l.ViewPostDetails(in)
}

// 查看未读的评论
func (s *CommunityServer) ViewUnreadComments(ctx context.Context, in *community.ViewUnreadCommentsRequest) (*community.ViewUnreadCommentsResponse, error) {
	l := logic.NewViewUnreadCommentsLogic(ctx, s.svcCtx)
	return l.ViewUnreadComments(in)
}
