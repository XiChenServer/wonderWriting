// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: rpc/community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Community_LookReplyComment_FullMethodName       = "/community.Community/LookReplyComment"
	Community_ReplyComment_FullMethodName           = "/community.Community/ReplyComment"
	Community_LikeComment_FullMethodName            = "/community.Community/LikeComment"
	Community_CancelLikeComment_FullMethodName      = "/community.Community/CancelLikeComment"
	Community_LikePost_FullMethodName               = "/community.Community/LikePost"
	Community_CancelLikePost_FullMethodName         = "/community.Community/CancelLikePost"
	Community_CollectPost_FullMethodName            = "/community.Community/CollectPost"
	Community_CancelCollectPost_FullMethodName      = "/community.Community/CancelCollectPost"
	Community_CommentPost_FullMethodName            = "/community.Community/CommentPost"
	Community_CancelCommentPost_FullMethodName      = "/community.Community/CancelCommentPost"
	Community_CommunityCreatePost_FullMethodName    = "/community.Community/CommunityCreatePost"
	Community_CommunityDelPost_FullMethodName       = "/community.Community/CommunityDelPost"
	Community_CommunityLookPostByOwn_FullMethodName = "/community.Community/CommunityLookPostByOwn"
	Community_CommunityLookAllPosts_FullMethodName  = "/community.Community/CommunityLookAllPosts"
	Community_LookComment_FullMethodName            = "/community.Community/LookComment"
	Community_WhetherLikePost_FullMethodName        = "/community.Community/WhetherLikePost"
	Community_WhetherCollectPost_FullMethodName     = "/community.Community/WhetherCollectPost"
	Community_ViewPostDetails_FullMethodName        = "/community.Community/ViewPostDetails"
)

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	// 查看回复
	LookReplyComment(ctx context.Context, in *LookReplyCommentRequest, opts ...grpc.CallOption) (*LookReplyCommentResponse, error)
	// 回复评论
	ReplyComment(ctx context.Context, in *ReplyCommunityRequest, opts ...grpc.CallOption) (*ReplyCommunityResponse, error)
	// 对评论进行点赞
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error)
	// 对评论点赞的取消
	CancelLikeComment(ctx context.Context, in *CancelLikeCommentRequest, opts ...grpc.CallOption) (*CancelLikeCommentResponse, error)
	// 定义点赞服务
	LikePost(ctx context.Context, in *CommunityLikePostRequest, opts ...grpc.CallOption) (*CommunityLikePostResponse, error)
	CancelLikePost(ctx context.Context, in *CommunityCancelLikePostRequest, opts ...grpc.CallOption) (*CommunityCancelLikePostResponse, error)
	CollectPost(ctx context.Context, in *CommunityCollectPostRequest, opts ...grpc.CallOption) (*CommunityCollectPostResponse, error)
	CancelCollectPost(ctx context.Context, in *CommunityCancelCollectPostRequest, opts ...grpc.CallOption) (*CommunityCancelCollectPostResponse, error)
	// 定义评论服务
	CommentPost(ctx context.Context, in *CommunityContentPostRequest, opts ...grpc.CallOption) (*CommunityContentPostResponse, error)
	CancelCommentPost(ctx context.Context, in *CommunityCancelContentPostRequest, opts ...grpc.CallOption) (*CommunityCancelContentPostResponse, error)
	// 定义帖子服务
	CommunityCreatePost(ctx context.Context, in *CommunityCreatePostRequest, opts ...grpc.CallOption) (*CommunityCreatePostResponse, error)
	CommunityDelPost(ctx context.Context, in *CommunityDelPostRequest, opts ...grpc.CallOption) (*CommunityDelPostResponse, error)
	CommunityLookPostByOwn(ctx context.Context, in *CommunityLookPostByOwnRequest, opts ...grpc.CallOption) (*CommunityLookPostByOwnResponses, error)
	CommunityLookAllPosts(ctx context.Context, in *CommunityLookAllPostsRequest, opts ...grpc.CallOption) (*CommunityLookAllPostsResponse, error)
	// 查看帖子的评论
	LookComment(ctx context.Context, in *LookCommentRequest, opts ...grpc.CallOption) (*LookCommentResponse, error)
	// 用户是否点赞帖子
	WhetherLikePost(ctx context.Context, in *WhetherLikePostRequest, opts ...grpc.CallOption) (*WhetherLikePostResponse, error)
	// 用户是否收藏帖子
	WhetherCollectPost(ctx context.Context, in *WhetherCollectPostRequest, opts ...grpc.CallOption) (*WhetherCollectPostResponse, error)
	ViewPostDetails(ctx context.Context, in *ViewPostDetailsRequest, opts ...grpc.CallOption) (*ViewPostDetailsResponse, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) LookReplyComment(ctx context.Context, in *LookReplyCommentRequest, opts ...grpc.CallOption) (*LookReplyCommentResponse, error) {
	out := new(LookReplyCommentResponse)
	err := c.cc.Invoke(ctx, Community_LookReplyComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ReplyComment(ctx context.Context, in *ReplyCommunityRequest, opts ...grpc.CallOption) (*ReplyCommunityResponse, error) {
	out := new(ReplyCommunityResponse)
	err := c.cc.Invoke(ctx, Community_ReplyComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*LikeCommentResponse, error) {
	out := new(LikeCommentResponse)
	err := c.cc.Invoke(ctx, Community_LikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CancelLikeComment(ctx context.Context, in *CancelLikeCommentRequest, opts ...grpc.CallOption) (*CancelLikeCommentResponse, error) {
	out := new(CancelLikeCommentResponse)
	err := c.cc.Invoke(ctx, Community_CancelLikeComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) LikePost(ctx context.Context, in *CommunityLikePostRequest, opts ...grpc.CallOption) (*CommunityLikePostResponse, error) {
	out := new(CommunityLikePostResponse)
	err := c.cc.Invoke(ctx, Community_LikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CancelLikePost(ctx context.Context, in *CommunityCancelLikePostRequest, opts ...grpc.CallOption) (*CommunityCancelLikePostResponse, error) {
	out := new(CommunityCancelLikePostResponse)
	err := c.cc.Invoke(ctx, Community_CancelLikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CollectPost(ctx context.Context, in *CommunityCollectPostRequest, opts ...grpc.CallOption) (*CommunityCollectPostResponse, error) {
	out := new(CommunityCollectPostResponse)
	err := c.cc.Invoke(ctx, Community_CollectPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CancelCollectPost(ctx context.Context, in *CommunityCancelCollectPostRequest, opts ...grpc.CallOption) (*CommunityCancelCollectPostResponse, error) {
	out := new(CommunityCancelCollectPostResponse)
	err := c.cc.Invoke(ctx, Community_CancelCollectPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommentPost(ctx context.Context, in *CommunityContentPostRequest, opts ...grpc.CallOption) (*CommunityContentPostResponse, error) {
	out := new(CommunityContentPostResponse)
	err := c.cc.Invoke(ctx, Community_CommentPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CancelCommentPost(ctx context.Context, in *CommunityCancelContentPostRequest, opts ...grpc.CallOption) (*CommunityCancelContentPostResponse, error) {
	out := new(CommunityCancelContentPostResponse)
	err := c.cc.Invoke(ctx, Community_CancelCommentPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityCreatePost(ctx context.Context, in *CommunityCreatePostRequest, opts ...grpc.CallOption) (*CommunityCreatePostResponse, error) {
	out := new(CommunityCreatePostResponse)
	err := c.cc.Invoke(ctx, Community_CommunityCreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityDelPost(ctx context.Context, in *CommunityDelPostRequest, opts ...grpc.CallOption) (*CommunityDelPostResponse, error) {
	out := new(CommunityDelPostResponse)
	err := c.cc.Invoke(ctx, Community_CommunityDelPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityLookPostByOwn(ctx context.Context, in *CommunityLookPostByOwnRequest, opts ...grpc.CallOption) (*CommunityLookPostByOwnResponses, error) {
	out := new(CommunityLookPostByOwnResponses)
	err := c.cc.Invoke(ctx, Community_CommunityLookPostByOwn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityLookAllPosts(ctx context.Context, in *CommunityLookAllPostsRequest, opts ...grpc.CallOption) (*CommunityLookAllPostsResponse, error) {
	out := new(CommunityLookAllPostsResponse)
	err := c.cc.Invoke(ctx, Community_CommunityLookAllPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) LookComment(ctx context.Context, in *LookCommentRequest, opts ...grpc.CallOption) (*LookCommentResponse, error) {
	out := new(LookCommentResponse)
	err := c.cc.Invoke(ctx, Community_LookComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) WhetherLikePost(ctx context.Context, in *WhetherLikePostRequest, opts ...grpc.CallOption) (*WhetherLikePostResponse, error) {
	out := new(WhetherLikePostResponse)
	err := c.cc.Invoke(ctx, Community_WhetherLikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) WhetherCollectPost(ctx context.Context, in *WhetherCollectPostRequest, opts ...grpc.CallOption) (*WhetherCollectPostResponse, error) {
	out := new(WhetherCollectPostResponse)
	err := c.cc.Invoke(ctx, Community_WhetherCollectPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) ViewPostDetails(ctx context.Context, in *ViewPostDetailsRequest, opts ...grpc.CallOption) (*ViewPostDetailsResponse, error) {
	out := new(ViewPostDetailsResponse)
	err := c.cc.Invoke(ctx, Community_ViewPostDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations must embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	// 查看回复
	LookReplyComment(context.Context, *LookReplyCommentRequest) (*LookReplyCommentResponse, error)
	// 回复评论
	ReplyComment(context.Context, *ReplyCommunityRequest) (*ReplyCommunityResponse, error)
	// 对评论进行点赞
	LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error)
	// 对评论点赞的取消
	CancelLikeComment(context.Context, *CancelLikeCommentRequest) (*CancelLikeCommentResponse, error)
	// 定义点赞服务
	LikePost(context.Context, *CommunityLikePostRequest) (*CommunityLikePostResponse, error)
	CancelLikePost(context.Context, *CommunityCancelLikePostRequest) (*CommunityCancelLikePostResponse, error)
	CollectPost(context.Context, *CommunityCollectPostRequest) (*CommunityCollectPostResponse, error)
	CancelCollectPost(context.Context, *CommunityCancelCollectPostRequest) (*CommunityCancelCollectPostResponse, error)
	// 定义评论服务
	CommentPost(context.Context, *CommunityContentPostRequest) (*CommunityContentPostResponse, error)
	CancelCommentPost(context.Context, *CommunityCancelContentPostRequest) (*CommunityCancelContentPostResponse, error)
	// 定义帖子服务
	CommunityCreatePost(context.Context, *CommunityCreatePostRequest) (*CommunityCreatePostResponse, error)
	CommunityDelPost(context.Context, *CommunityDelPostRequest) (*CommunityDelPostResponse, error)
	CommunityLookPostByOwn(context.Context, *CommunityLookPostByOwnRequest) (*CommunityLookPostByOwnResponses, error)
	CommunityLookAllPosts(context.Context, *CommunityLookAllPostsRequest) (*CommunityLookAllPostsResponse, error)
	// 查看帖子的评论
	LookComment(context.Context, *LookCommentRequest) (*LookCommentResponse, error)
	// 用户是否点赞帖子
	WhetherLikePost(context.Context, *WhetherLikePostRequest) (*WhetherLikePostResponse, error)
	// 用户是否收藏帖子
	WhetherCollectPost(context.Context, *WhetherCollectPostRequest) (*WhetherCollectPostResponse, error)
	ViewPostDetails(context.Context, *ViewPostDetailsRequest) (*ViewPostDetailsResponse, error)
	mustEmbedUnimplementedCommunityServer()
}

// UnimplementedCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) LookReplyComment(context.Context, *LookReplyCommentRequest) (*LookReplyCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookReplyComment not implemented")
}
func (UnimplementedCommunityServer) ReplyComment(context.Context, *ReplyCommunityRequest) (*ReplyCommunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyComment not implemented")
}
func (UnimplementedCommunityServer) LikeComment(context.Context, *LikeCommentRequest) (*LikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedCommunityServer) CancelLikeComment(context.Context, *CancelLikeCommentRequest) (*CancelLikeCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLikeComment not implemented")
}
func (UnimplementedCommunityServer) LikePost(context.Context, *CommunityLikePostRequest) (*CommunityLikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedCommunityServer) CancelLikePost(context.Context, *CommunityCancelLikePostRequest) (*CommunityCancelLikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLikePost not implemented")
}
func (UnimplementedCommunityServer) CollectPost(context.Context, *CommunityCollectPostRequest) (*CommunityCollectPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPost not implemented")
}
func (UnimplementedCommunityServer) CancelCollectPost(context.Context, *CommunityCancelCollectPostRequest) (*CommunityCancelCollectPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCollectPost not implemented")
}
func (UnimplementedCommunityServer) CommentPost(context.Context, *CommunityContentPostRequest) (*CommunityContentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentPost not implemented")
}
func (UnimplementedCommunityServer) CancelCommentPost(context.Context, *CommunityCancelContentPostRequest) (*CommunityCancelContentPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCommentPost not implemented")
}
func (UnimplementedCommunityServer) CommunityCreatePost(context.Context, *CommunityCreatePostRequest) (*CommunityCreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityCreatePost not implemented")
}
func (UnimplementedCommunityServer) CommunityDelPost(context.Context, *CommunityDelPostRequest) (*CommunityDelPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityDelPost not implemented")
}
func (UnimplementedCommunityServer) CommunityLookPostByOwn(context.Context, *CommunityLookPostByOwnRequest) (*CommunityLookPostByOwnResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityLookPostByOwn not implemented")
}
func (UnimplementedCommunityServer) CommunityLookAllPosts(context.Context, *CommunityLookAllPostsRequest) (*CommunityLookAllPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityLookAllPosts not implemented")
}
func (UnimplementedCommunityServer) LookComment(context.Context, *LookCommentRequest) (*LookCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookComment not implemented")
}
func (UnimplementedCommunityServer) WhetherLikePost(context.Context, *WhetherLikePostRequest) (*WhetherLikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhetherLikePost not implemented")
}
func (UnimplementedCommunityServer) WhetherCollectPost(context.Context, *WhetherCollectPostRequest) (*WhetherCollectPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhetherCollectPost not implemented")
}
func (UnimplementedCommunityServer) ViewPostDetails(context.Context, *ViewPostDetailsRequest) (*ViewPostDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewPostDetails not implemented")
}
func (UnimplementedCommunityServer) mustEmbedUnimplementedCommunityServer() {}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_LookReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).LookReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_LookReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).LookReplyComment(ctx, req.(*LookReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ReplyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ReplyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_ReplyComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ReplyComment(ctx, req.(*ReplyCommunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CancelLikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CancelLikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CancelLikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CancelLikeComment(ctx, req.(*CancelLikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityLikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).LikePost(ctx, req.(*CommunityLikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CancelLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCancelLikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CancelLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CancelLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CancelLikePost(ctx, req.(*CommunityCancelLikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CollectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCollectPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CollectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CollectPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CollectPost(ctx, req.(*CommunityCollectPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CancelCollectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCancelCollectPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CancelCollectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CancelCollectPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CancelCollectPost(ctx, req.(*CommunityCancelCollectPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityContentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommentPost(ctx, req.(*CommunityContentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CancelCommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCancelContentPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CancelCommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CancelCommentPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CancelCommentPost(ctx, req.(*CommunityCancelContentPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityCreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityCreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityCreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityCreatePost(ctx, req.(*CommunityCreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityDelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityDelPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityDelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityDelPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityDelPost(ctx, req.(*CommunityDelPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityLookPostByOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityLookPostByOwnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityLookPostByOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityLookPostByOwn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityLookPostByOwn(ctx, req.(*CommunityLookPostByOwnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityLookAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityLookAllPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityLookAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityLookAllPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityLookAllPosts(ctx, req.(*CommunityLookAllPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_LookComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).LookComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_LookComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).LookComment(ctx, req.(*LookCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_WhetherLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhetherLikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).WhetherLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_WhetherLikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).WhetherLikePost(ctx, req.(*WhetherLikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_WhetherCollectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhetherCollectPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).WhetherCollectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_WhetherCollectPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).WhetherCollectPost(ctx, req.(*WhetherCollectPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_ViewPostDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewPostDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).ViewPostDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_ViewPostDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).ViewPostDetails(ctx, req.(*ViewPostDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookReplyComment",
			Handler:    _Community_LookReplyComment_Handler,
		},
		{
			MethodName: "ReplyComment",
			Handler:    _Community_ReplyComment_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Community_LikeComment_Handler,
		},
		{
			MethodName: "CancelLikeComment",
			Handler:    _Community_CancelLikeComment_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _Community_LikePost_Handler,
		},
		{
			MethodName: "CancelLikePost",
			Handler:    _Community_CancelLikePost_Handler,
		},
		{
			MethodName: "CollectPost",
			Handler:    _Community_CollectPost_Handler,
		},
		{
			MethodName: "CancelCollectPost",
			Handler:    _Community_CancelCollectPost_Handler,
		},
		{
			MethodName: "CommentPost",
			Handler:    _Community_CommentPost_Handler,
		},
		{
			MethodName: "CancelCommentPost",
			Handler:    _Community_CancelCommentPost_Handler,
		},
		{
			MethodName: "CommunityCreatePost",
			Handler:    _Community_CommunityCreatePost_Handler,
		},
		{
			MethodName: "CommunityDelPost",
			Handler:    _Community_CommunityDelPost_Handler,
		},
		{
			MethodName: "CommunityLookPostByOwn",
			Handler:    _Community_CommunityLookPostByOwn_Handler,
		},
		{
			MethodName: "CommunityLookAllPosts",
			Handler:    _Community_CommunityLookAllPosts_Handler,
		},
		{
			MethodName: "LookComment",
			Handler:    _Community_LookComment_Handler,
		},
		{
			MethodName: "WhetherLikePost",
			Handler:    _Community_WhetherLikePost_Handler,
		},
		{
			MethodName: "WhetherCollectPost",
			Handler:    _Community_WhetherCollectPost_Handler,
		},
		{
			MethodName: "ViewPostDetails",
			Handler:    _Community_ViewPostDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/community.proto",
}
