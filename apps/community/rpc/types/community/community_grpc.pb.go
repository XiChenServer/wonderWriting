// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: rpc/community.proto

package community

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Community_CommunityCreatePost_FullMethodName    = "/community.Community/CommunityCreatePost"
	Community_CommunityDelPost_FullMethodName       = "/community.Community/CommunityDelPost"
	Community_CommunityLookPostByOwn_FullMethodName = "/community.Community/CommunityLookPostByOwn"
	Community_CommunityLookAllPosts_FullMethodName  = "/community.Community/CommunityLookAllPosts"
)

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	CommunityCreatePost(ctx context.Context, in *CommunityCreatePostRequest, opts ...grpc.CallOption) (*CommunityCreatePostResponse, error)
	CommunityDelPost(ctx context.Context, in *CommunityDelPostRequest, opts ...grpc.CallOption) (*CommunityDelPostResponse, error)
	CommunityLookPostByOwn(ctx context.Context, in *CommunityLookPostByOwnRequest, opts ...grpc.CallOption) (*CommunityLookPostByOwnResponses, error)
	CommunityLookAllPosts(ctx context.Context, in *CommunityLookAllPostsRequest, opts ...grpc.CallOption) (*CommunityLookAllPostsResponse, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) CommunityCreatePost(ctx context.Context, in *CommunityCreatePostRequest, opts ...grpc.CallOption) (*CommunityCreatePostResponse, error) {
	out := new(CommunityCreatePostResponse)
	err := c.cc.Invoke(ctx, Community_CommunityCreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityDelPost(ctx context.Context, in *CommunityDelPostRequest, opts ...grpc.CallOption) (*CommunityDelPostResponse, error) {
	out := new(CommunityDelPostResponse)
	err := c.cc.Invoke(ctx, Community_CommunityDelPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityLookPostByOwn(ctx context.Context, in *CommunityLookPostByOwnRequest, opts ...grpc.CallOption) (*CommunityLookPostByOwnResponses, error) {
	out := new(CommunityLookPostByOwnResponses)
	err := c.cc.Invoke(ctx, Community_CommunityLookPostByOwn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CommunityLookAllPosts(ctx context.Context, in *CommunityLookAllPostsRequest, opts ...grpc.CallOption) (*CommunityLookAllPostsResponse, error) {
	out := new(CommunityLookAllPostsResponse)
	err := c.cc.Invoke(ctx, Community_CommunityLookAllPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations must embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	CommunityCreatePost(context.Context, *CommunityCreatePostRequest) (*CommunityCreatePostResponse, error)
	CommunityDelPost(context.Context, *CommunityDelPostRequest) (*CommunityDelPostResponse, error)
	CommunityLookPostByOwn(context.Context, *CommunityLookPostByOwnRequest) (*CommunityLookPostByOwnResponses, error)
	CommunityLookAllPosts(context.Context, *CommunityLookAllPostsRequest) (*CommunityLookAllPostsResponse, error)
	mustEmbedUnimplementedCommunityServer()
}

// UnimplementedCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) CommunityCreatePost(context.Context, *CommunityCreatePostRequest) (*CommunityCreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityCreatePost not implemented")
}
func (UnimplementedCommunityServer) CommunityDelPost(context.Context, *CommunityDelPostRequest) (*CommunityDelPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityDelPost not implemented")
}
func (UnimplementedCommunityServer) CommunityLookPostByOwn(context.Context, *CommunityLookPostByOwnRequest) (*CommunityLookPostByOwnResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityLookPostByOwn not implemented")
}
func (UnimplementedCommunityServer) CommunityLookAllPosts(context.Context, *CommunityLookAllPostsRequest) (*CommunityLookAllPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommunityLookAllPosts not implemented")
}
func (UnimplementedCommunityServer) mustEmbedUnimplementedCommunityServer() {}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_CommunityCreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityCreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityCreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityCreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityCreatePost(ctx, req.(*CommunityCreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityDelPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityDelPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityDelPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityDelPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityDelPost(ctx, req.(*CommunityDelPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityLookPostByOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityLookPostByOwnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityLookPostByOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityLookPostByOwn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityLookPostByOwn(ctx, req.(*CommunityLookPostByOwnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CommunityLookAllPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunityLookAllPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CommunityLookAllPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Community_CommunityLookAllPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CommunityLookAllPosts(ctx, req.(*CommunityLookAllPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "community.Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommunityCreatePost",
			Handler:    _Community_CommunityCreatePost_Handler,
		},
		{
			MethodName: "CommunityDelPost",
			Handler:    _Community_CommunityDelPost_Handler,
		},
		{
			MethodName: "CommunityLookPostByOwn",
			Handler:    _Community_CommunityLookPostByOwn_Handler,
		},
		{
			MethodName: "CommunityLookAllPosts",
			Handler:    _Community_CommunityLookAllPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/community.proto",
}
