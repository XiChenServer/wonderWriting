// Code generated by goctl. DO NOT EDIT.
// Source: grow.proto

package growclient

import (
	"context"

	"calligraphy/apps/grow/rpc/types/grow"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckInRequest              = grow.CheckInRequest
	CheckInResponse             = grow.CheckInResponse
	CheckPunchCardModelRequest  = grow.CheckPunchCardModelRequest
	CheckPunchCardModelResponse = grow.CheckPunchCardModelResponse
	CreateRecordRequest         = grow.CreateRecordRequest
	CreateRecordResponse        = grow.CreateRecordResponse
	LookRecordByUserIdRequest   = grow.LookRecordByUserIdRequest
	LookRecordByUserIdResponse  = grow.LookRecordByUserIdResponse
	RecordSimpleInfo            = grow.RecordSimpleInfo
	StartCheckRequest           = grow.StartCheckRequest
	StartCheckResponse          = grow.StartCheckResponse

	Grow interface {
		// 开启签到
		StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error)
		// 上传书法记录
		CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
		// 查看某人的书法记录
		LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error)
		// 检查打卡模式是否开启
		CheckPunchCardModel(ctx context.Context, in *CheckPunchCardModelRequest, opts ...grpc.CallOption) (*CheckPunchCardModelResponse, error)
		// 进行打卡
		CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error)
	}

	defaultGrow struct {
		cli zrpc.Client
	}
)

func NewGrow(cli zrpc.Client) Grow {
	return &defaultGrow{
		cli: cli,
	}
}

// 开启签到
func (m *defaultGrow) StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error) {
	client := grow.NewGrowClient(m.cli.Conn())
	return client.StartCheck(ctx, in, opts...)
}

// 上传书法记录
func (m *defaultGrow) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	client := grow.NewGrowClient(m.cli.Conn())
	return client.CreateRecord(ctx, in, opts...)
}

// 查看某人的书法记录
func (m *defaultGrow) LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error) {
	client := grow.NewGrowClient(m.cli.Conn())
	return client.LookRecordByUserId(ctx, in, opts...)
}

// 检查打卡模式是否开启
func (m *defaultGrow) CheckPunchCardModel(ctx context.Context, in *CheckPunchCardModelRequest, opts ...grpc.CallOption) (*CheckPunchCardModelResponse, error) {
	client := grow.NewGrowClient(m.cli.Conn())
	return client.CheckPunchCardModel(ctx, in, opts...)
}

// 进行打卡
func (m *defaultGrow) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error) {
	client := grow.NewGrowClient(m.cli.Conn())
	return client.CheckIn(ctx, in, opts...)
}
