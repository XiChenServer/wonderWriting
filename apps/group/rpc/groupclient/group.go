// Code generated by goctl. DO NOT EDIT.
// Source: group.proto

package groupclient

import (
	"context"

	"calligraphy/apps/group/rpc/types/group"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckPunchCardModelRequest  = group.CheckPunchCardModelRequest
	CheckPunchCardModelResponse = group.CheckPunchCardModelResponse
	CreateRecordRequest         = group.CreateRecordRequest
	CreateRecordResponse        = group.CreateRecordResponse
	LookRecordByUserIdRequest   = group.LookRecordByUserIdRequest
	LookRecordByUserIdResponse  = group.LookRecordByUserIdResponse
	RecordSimpleInfo            = group.RecordSimpleInfo
	StartCheckRequest           = group.StartCheckRequest
	StartCheckResponse          = group.StartCheckResponse

	Group interface {
		// 开启签到
		StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error)
		// 上传书法记录
		CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
		// 查看某人的书法记录
		LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error)
		// 检查打卡模式是否开启
		CheckPunchCardModel(ctx context.Context, in *CheckPunchCardModelRequest, opts ...grpc.CallOption) (*CheckPunchCardModelResponse, error)
	}

	defaultGroup struct {
		cli zrpc.Client
	}
)

func NewGroup(cli zrpc.Client) Group {
	return &defaultGroup{
		cli: cli,
	}
}

// 开启签到
func (m *defaultGroup) StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.StartCheck(ctx, in, opts...)
}

// 上传书法记录
func (m *defaultGroup) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.CreateRecord(ctx, in, opts...)
}

// 查看某人的书法记录
func (m *defaultGroup) LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.LookRecordByUserId(ctx, in, opts...)
}

// 检查打卡模式是否开启
func (m *defaultGroup) CheckPunchCardModel(ctx context.Context, in *CheckPunchCardModelRequest, opts ...grpc.CallOption) (*CheckPunchCardModelResponse, error) {
	client := group.NewGroupClient(m.cli.Conn())
	return client.CheckPunchCardModel(ctx, in, opts...)
}
