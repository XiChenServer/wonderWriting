// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: rpc/group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Group_StartCheck_FullMethodName         = "/group.Group/StartCheck"
	Group_CreateRecord_FullMethodName       = "/group.Group/CreateRecord"
	Group_LookRecordByUserId_FullMethodName = "/group.Group/LookRecordByUserId"
)

// GroupClient is the client API for Group service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupClient interface {
	// 开启签到
	StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error)
	// 上传书法记录
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	// 查看某人的书法记录
	LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error)
}

type groupClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupClient(cc grpc.ClientConnInterface) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) StartCheck(ctx context.Context, in *StartCheckRequest, opts ...grpc.CallOption) (*StartCheckResponse, error) {
	out := new(StartCheckResponse)
	err := c.cc.Invoke(ctx, Group_StartCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, Group_CreateRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) LookRecordByUserId(ctx context.Context, in *LookRecordByUserIdRequest, opts ...grpc.CallOption) (*LookRecordByUserIdResponse, error) {
	out := new(LookRecordByUserIdResponse)
	err := c.cc.Invoke(ctx, Group_LookRecordByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServer is the server API for Group service.
// All implementations must embed UnimplementedGroupServer
// for forward compatibility
type GroupServer interface {
	// 开启签到
	StartCheck(context.Context, *StartCheckRequest) (*StartCheckResponse, error)
	// 上传书法记录
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	// 查看某人的书法记录
	LookRecordByUserId(context.Context, *LookRecordByUserIdRequest) (*LookRecordByUserIdResponse, error)
	mustEmbedUnimplementedGroupServer()
}

// UnimplementedGroupServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServer struct {
}

func (UnimplementedGroupServer) StartCheck(context.Context, *StartCheckRequest) (*StartCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCheck not implemented")
}
func (UnimplementedGroupServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedGroupServer) LookRecordByUserId(context.Context, *LookRecordByUserIdRequest) (*LookRecordByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookRecordByUserId not implemented")
}
func (UnimplementedGroupServer) mustEmbedUnimplementedGroupServer() {}

// UnsafeGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServer will
// result in compilation errors.
type UnsafeGroupServer interface {
	mustEmbedUnimplementedGroupServer()
}

func RegisterGroupServer(s grpc.ServiceRegistrar, srv GroupServer) {
	s.RegisterService(&Group_ServiceDesc, srv)
}

func _Group_StartCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).StartCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_StartCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).StartCheck(ctx, req.(*StartCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_LookRecordByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookRecordByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).LookRecordByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Group_LookRecordByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).LookRecordByUserId(ctx, req.(*LookRecordByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Group_ServiceDesc is the grpc.ServiceDesc for Group service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Group_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCheck",
			Handler:    _Group_StartCheck_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _Group_CreateRecord_Handler,
		},
		{
			MethodName: "LookRecordByUserId",
			Handler:    _Group_LookRecordByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/group.proto",
}
