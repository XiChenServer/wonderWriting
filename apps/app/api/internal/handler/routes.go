// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	community "calligraphy/apps/app/api/internal/handler/community"
	group "calligraphy/apps/app/api/internal/handler/group"
	home "calligraphy/apps/app/api/internal/handler/home"
	user "calligraphy/apps/app/api/internal/handler/user"
	"calligraphy/apps/app/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/basic/getemailverification",
				Handler: user.GetEmailVerificationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: user.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/forgetpwd",
				Handler: user.UserForgetPwdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/userinfo",
				Handler: user.UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/modpwd",
				Handler: user.UserModPwdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/modavatar",
				Handler: user.UserModAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/modbackground",
				Handler: user.UserModBackgroundHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/modinfo",
				Handler: user.UserModInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/look/allposts",
				Handler: community.LookAllPostsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/look/comment",
				Handler: community.LookCommentHandler(serverCtx),
			},
		},
		rest.WithPrefix("/community"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create/post",
				Handler: community.UsercretePostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete/post",
				Handler: community.UserDelPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/look/postbyown",
				Handler: community.UserLookPostByOwnHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/like/post",
				Handler: community.LikePostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cancel/like",
				Handler: community.CancelLikePostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/comment/post",
				Handler: community.CommentPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cancel/comment",
				Handler: community.CancelCommentPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/collect/post",
				Handler: community.CollectPostHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cancel/collect",
				Handler: community.CancelCollectPostHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/community"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/popularity/rankings",
				Handler: home.UserPopularityRankingsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/post/popularity/rankings",
				Handler: home.PostPopularityRankingsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/home"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/start/check",
				Handler: group.StartCheckHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create/record",
				Handler: group.CreateRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/look/recordbyuser",
				Handler: group.LookRecordByUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/check/pubcgcard",
				Handler: group.CheckPunchCardHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/group"),
	)
}
